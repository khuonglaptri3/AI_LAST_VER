{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% 1. Import modules\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport seaborn as sns\n\n# %% 2. Load dataset tá»« Kaggle (Food-101)\nDATA_DIR = \"/kaggle/input/dataset-for-nutridish-project/Model_Training/datasets/food101/images\"\nIMG_SIZE = 224\nBATCH_SIZE = 32\n\ntrain_ds = tf.keras.utils.image_dataset_from_directory(\n    DATA_DIR,\n    validation_split=0.2,   # 80% train, 20% val\n    subset=\"training\",\n    seed=123,\n    image_size=(IMG_SIZE, IMG_SIZE),\n    batch_size=BATCH_SIZE\n)\n\nval_ds = tf.keras.utils.image_dataset_from_directory(\n    DATA_DIR,\n    validation_split=0.2,\n    subset=\"validation\",\n    seed=123,\n    image_size=(IMG_SIZE, IMG_SIZE),\n    batch_size=BATCH_SIZE\n)\n\nclass_names = train_ds.class_names\nNUM_CLASSES = len(class_names)\nprint(\"Sá»‘ lá»›p:\", NUM_CLASSES)\n\n# %% 3. Optimize dataset pipeline\nAUTOTUNE = tf.data.AUTOTUNE\ntrain_ds = train_ds.shuffle(1000).prefetch(buffer_size=AUTOTUNE)\nval_ds = val_ds.prefetch(buffer_size=AUTOTUNE)\n\n# %% 4. Build Baseline Model (ResNet50 hoáº·c EfficientNetB0)\ndef create_baseline(model_name=\"ResNet50\"):\n    if model_name == \"ResNet50\":\n        base_model = tf.keras.applications.ResNet50(\n            include_top=False,\n            weights=\"imagenet\",\n            input_shape=(IMG_SIZE, IMG_SIZE, 3),\n            pooling=\"avg\"\n        )\n    elif model_name == \"EfficientNetB0\":\n        base_model = tf.keras.applications.EfficientNetB0(\n            include_top=False,\n            weights=\"imagenet\",\n            input_shape=(IMG_SIZE, IMG_SIZE, 3),\n            pooling=\"avg\"\n        )\n    else:\n        raise ValueError(\"Model name must be ResNet50 or EfficientNetB0\")\n    \n    base_model.trainable = False  # Freeze backbone\n    \n    model = tf.keras.Sequential([\n        base_model,\n        tf.keras.layers.Dense(256, activation=\"relu\"),\n        tf.keras.layers.Dropout(0.5),\n        tf.keras.layers.Dense(NUM_CLASSES, activation=\"softmax\")\n    ])\n    \n    return model\n\n# %% 5. HÃ m train + evaluate\ndef train_and_evaluate(model_name, epochs=5):\n    print(f\"\\nðŸš€ Training {model_name}...\\n\")\n    model = create_baseline(model_name)\n    model.compile(\n        optimizer=tf.keras.optimizers.Adam(learning_rate=1e-3),\n        loss=\"sparse_categorical_crossentropy\",\n        metrics=[\"accuracy\"]\n    )\n    history = model.fit(\n        train_ds,\n        validation_data=val_ds,\n        epochs=epochs,\n        callbacks=[tf.keras.callbacks.EarlyStopping(patience=2, restore_best_weights=True)]\n    )\n    # Save model\n    model.save(f\"/kaggle/working/baseline_{model_name}.h5\")\n    print(f\"âœ… Model {model_name} saved!\\n\")\n    return model, history\n\n# %% 6. Train ResNet50 vÃ  EfficientNetB0\nresnet_model, resnet_history = train_and_evaluate(\"ResNet50\", epochs=5)\neffnet_model, effnet_history = train_and_evaluate(\"EfficientNetB0\", epochs=5)\n\n# %% 7. So sÃ¡nh Training curves\nplt.figure(figsize=(14,6))\n# Accuracy\nplt.subplot(1,2,1)\nplt.plot(resnet_history.history[\"val_accuracy\"], label=\"ResNet50 Val Acc\")\nplt.plot(effnet_history.history[\"val_accuracy\"], label=\"EfficientNetB0 Val Acc\")\nplt.legend()\nplt.title(\"Validation Accuracy\")\n\n# Loss\nplt.subplot(1,2,2)\nplt.plot(resnet_history.history[\"val_loss\"], label=\"ResNet50 Val Loss\")\nplt.plot(effnet_history.history[\"val_loss\"], label=\"EfficientNetB0 Val Loss\")\nplt.legend()\nplt.title(\"Validation Loss\")\nplt.show()\n\n# %% 8. Evaluation function\n# def evaluate_model(model, model_name):\n#     y_true, y_pred = [], []\n#     for images, labels in val_ds:\n#         preds = model.predict(images, verbose=0)\n#         y_true.extend(labels.numpy())\n#         y_pred.extend(np.argmax(preds, axis=1))\n\n#     print(f\"\\nðŸ“Š Classification Report ({model_name}):\")\n#     print(classification_report(y_true, y_pred, target_names=class_names[:10]))  \n\n#     cm = confusion_matrix(y_true, y_pred)\n#     plt.figure(figsize=(10,8))\n#     sns.heatmap(cm, cmap=\"Blues\", cbar=False)\n#     plt.title(f\"Confusion Matrix - {model_name}\")\n#     plt.xlabel(\"Predicted\")\n#     plt.ylabel(\"Actual\")\n#     plt.show()\n# %% 8. Evaluation function\ndef evaluate_model(model, model_name):\n    y_true, y_pred = [], []\n    for images, labels in val_ds:\n        preds = model.predict(images, verbose=0)\n        y_true.extend(labels.numpy())\n        y_pred.extend(np.argmax(preds, axis=1))\n\n    print(f\"\\nðŸ“Š Classification Report ({model_name}):\")\n    # In full report vá»›i toÃ n bá»™ class\n    print(classification_report(y_true, y_pred, target_names=class_names))  \n\n    cm = confusion_matrix(y_true, y_pred)\n    plt.figure(figsize=(12,10))\n    sns.heatmap(cm, cmap=\"Blues\", cbar=False, xticklabels=class_names, yticklabels=class_names)\n    plt.title(f\"Confusion Matrix - {model_name}\")\n    plt.xlabel(\"Predicted\")\n    plt.ylabel(\"Actual\")\n    plt.show()\n\n# %% 9. Evaluate cáº£ 2 model\nevaluate_model(resnet_model, \"ResNet50\")\nevaluate_model(effnet_model, \"EfficientNetB0\")\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null}]}